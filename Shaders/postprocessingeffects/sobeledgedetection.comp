#version 460 core
#extension GL_ARB_derivative_control : enable
#extension GL_ARB_enhanced_layouts : enable
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_explicit_attrib_location : enable
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

precision highp float;
precision mediump int;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D ColorTexture;
layout(set = 0, binding = 1, rgba16f) uniform coherent writeonly image2D TargetTexture;

layout(push_constant) uniform UniformSettingsBlock { layout(offset = 0) float radius; }
settings;

#include "texture.glsl"

void main() {

	/*	*/
	if (any(greaterThan(gl_GlobalInvocationID.xy, imageSize(TargetTexture)))) {
		return;
	}

	// Compute sample coordinate.
	const ivec2 TextureCoord = ivec2(gl_GlobalInvocationID.xy);

	const vec2 sourceSize = textureSize(ColorTexture, 0);
	const vec2 source_texel_size = (1.0 / sourceSize);

	vec2 sampleTexCoord = source_texel_size * TextureCoord;

	const vec3 edgeColor = sobel(ColorTexture, settings.radius, sampleTexCoord);
	// float prop = step(_ThresHold, length(round(g.rgb)));
	// float4 edge = lerp(color.rgba, _Color.rgba, prop);
	// g = edge.rgb;
	// g = 1 - (1 - color.rgb) * (1 - g.rgb * _Color * length(g));

	/*	*/
	imageStore(TargetTexture, TextureCoord, vec4(edgeColor.rgb, 1));
}