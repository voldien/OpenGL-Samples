#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_KHR_shader_subgroup_arithmetic : enable

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

struct vertexData {
	vec3 position;
	vec3 normal;
	// vec3 tangent;
};

layout(std140, set = 0, binding = 0) uniform UniformBufferBlock {
	mat4 view;
	mat4 proj;
	vec4 clip_plane;
	vec4 bound_box_center;
	vec4 bound_box_extended;
	uint nrFaces;
	uint padding0;
	uint padding1;
	uint padding2;
}
areaSettings;

/*	*/
layout(std430, set = 0, binding = 1) readonly buffer IndicesBuffer { uint indices[]; }
indices;

/*	*/
layout(std430, set = 0, binding = 2) readonly buffer VertexBuffer { vertexData vertices[]; }
vertices;

/*	*/
layout(std430, set = 0, binding = 3) writeonly buffer Result {
	layout(offset = 0) float area;
	layout(offset = 4) float dragAverage;
}
result;

layout(push_constant) uniform Transformation { layout(offset = 0) mat4 model; }
transform;

void main() {

	const vec3 orth_normal = vec3(0, 0, -1);
	const uint triangle_index = gl_GlobalInvocationID.x;

	if (triangle_index >= areaSettings.nrFaces) {
		return;
	}

	/*	Extract Triangle per local thread.	*/
	const uint v0_index = indices.indices[triangle_index * 3 + 0];
	const uint v1_index = indices.indices[triangle_index * 3 + 1];
	const uint v2_index = indices.indices[triangle_index * 3 + 2];

	const mat4 mvp = transform.model * areaSettings.view * areaSettings.proj;

	/*	Compute World Space Transformation.	*/
	vec4 v0 = mvp * vec4(vertices.vertices[v0_index].position, 1);
	vec4 v1 = mvp * vec4(vertices.vertices[v1_index].position, 1);
	vec4 v2 = mvp * vec4(vertices.vertices[v2_index].position, 1);

	vec3 n0 = normalize((mvp * vec4(vertices.vertices[v0_index].normal, 0)).xyz);
	vec3 n1 = normalize((mvp * vec4(vertices.vertices[v1_index].normal, 0)).xyz);
	vec3 n2 = normalize((mvp * vec4(vertices.vertices[v2_index].normal, 0)).xyz);

	/*	*/
	v0 /= v0.w;
	v1 /= v1.w;
	v2 /= v2.w;

	/*	Clip Geometry.	*/

	/*	Project Geometry.	*/
	const vec2 proj_v0 = v0.xy;
	const vec2 proj_v1 = v1.xy;
	const vec2 proj_v2 = v2.xy;

	/*	Compute Area.	*/

	const mat2 proj_v0_v1 = mat2(proj_v0.x, proj_v0.y, proj_v1.x, proj_v1.y);
	const mat2 proj_v1_v2 = mat2(proj_v1.x, proj_v1.y, proj_v2.x, proj_v2.y);
	const mat2 proj_v2_v0 = mat2(proj_v2.x, proj_v2.y, proj_v0.x, proj_v0.y);

	/*	*/
	const float sum = 0.5 * max(0, determinant(proj_v0_v1) + determinant(proj_v0_v1) + determinant(proj_v0_v1));

	const float angle = dot(orth_normal, n0.xyz);
	const float visable = angle > 0 ? 1 : 0;

	float triangle_visable_area = subgroupAdd(sum * visable);

	const float angle_surface0 = max(0, dot(orth_normal, n0.xyz));
	const float angle_surface1 = max(0, dot(orth_normal, n1.xyz));
	const float angle_surface2 = max(0, dot(orth_normal, n2.xyz));

	const float surface_angle = (angle_surface0 + angle_surface1 + angle_surface2) / 3.0;

	const float average_drag = subgroupAdd(surface_angle * sum * visable);

	/*	Calculate overlapping/depth testing.	*/

	/*	Determine front or back face.	*/

	/*	Calculate Face Normal.	*/

	/*	Average Drag Coeif.	*/

	/*	Merge all result.	*/
	if (subgroupElect()) {
		result.area = triangle_visable_area;
		result.dragAverage = max(0.75, average_drag / triangle_visable_area);
	}
}
