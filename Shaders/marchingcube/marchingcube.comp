#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 9, local_size_y = 9, local_size_z = 9) in;

const uint chunk_size = 10;
const uint chunk_size2 = chunk_size * chunk_size;
const uint num_point_4_cell = 15;

#include "marchinbcube_common.glsl"
#include "triangle_table.glsl"

// layout(set = 0, binding = 0, std140) uniform UniformBufferBlock {
// 	float voxel_size;
// 	float threshold;
// 	vec3 position_offset;
// 	vec3 random_offset;
// }
// ubo;

layout(std430, set = 0, binding = 1) buffer writeonly restrict GeomBuffer { Vertex vertices[]; };

vec3 createVert(vec3 p0, vec3 p1, float d0, float d1) {

	const float diff = d1 - d0;
	if (abs(diff) > 1e-9) {
		return (p1 - p0) * (ubo.settings.threshold - d0) / diff + p0;
	} else {
		return (p0 + p1) * 0.5;
	}
}

uint contIndex(const uint x, const uint y, const uint z) { return chunk_size2 * z + chunk_size * y + x; }

void createVerts(const in vec3 voxel_index, inout vec3 pos[12], const in float vox_data[8]) {

	// All corner points of the current cube
	const float voxel_size = ubo.settings.voxel_size;
	float x = voxel_index.x * voxel_size;
	float y = voxel_index.y * voxel_size;
	float z = voxel_index.z * voxel_size;
	vec3 c0 = vec3(x, y, z);
	vec3 c1 = vec3(x + voxel_size, y, z);
	vec3 c2 = vec3(x + voxel_size, y + voxel_size, z);
	vec3 c3 = vec3(x, y + voxel_size, z);
	vec3 c4 = vec3(x, y, z + voxel_size);
	vec3 c5 = vec3(x + voxel_size, y, z + voxel_size);
	vec3 c6 = vec3(x + voxel_size, y + voxel_size, z + voxel_size);
	vec3 c7 = vec3(x, y + voxel_size, z + voxel_size);

	// Find the 12 edge vertices by interpolating between the corner points,
	// depending on the values of the field at those corner points:
	pos[0] = createVert(c0, c1, vox_data[0], vox_data[1]);
	pos[1] = createVert(c1, c2, vox_data[1], vox_data[2]);
	pos[2] = createVert(c2, c3, vox_data[2], vox_data[3]);
	pos[3] = createVert(c3, c0, vox_data[3], vox_data[0]);

	pos[4] = createVert(c4, c5, vox_data[4], vox_data[5]);
	pos[5] = createVert(c5, c6, vox_data[5], vox_data[6]);
	pos[6] = createVert(c6, c7, vox_data[6], vox_data[7]);
	pos[7] = createVert(c7, c4, vox_data[7], vox_data[4]);

	pos[8] = createVert(c0, c4, vox_data[0], vox_data[4]);
	pos[9] = createVert(c1, c5, vox_data[1], vox_data[5]);
	pos[10] = createVert(c2, c6, vox_data[2], vox_data[6]);
	pos[11] = createVert(c3, c7, vox_data[3], vox_data[7]);
}


void main() {

	// Make sure this is not a border cell (otherwise neighbor lookup in the next step would fail):
	if (gl_LocalInvocationID.x >= chunk_size - 1 || gl_LocalInvocationID.y >= chunk_size - 1 ||
		gl_LocalInvocationID.z >= chunk_size - 1) {
		return;
	}

	const vec4 bounds = vec4(9);
	const float scale = ubo.settings.scale;
	const float mag = ubo.settings.mag;
	uvec3 index = gl_LocalInvocationID;
	vec3 position = ubo.settings.random_offset.xyz + ( ubo.settings.position_offset.xyz * bounds.r + gl_GlobalInvocationID );// * scale * bounds.r;

	// Retrieve all necessary data from neighboring cells:
	float vox_data[8];
	vox_data[0] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * uvec3(0));
	vox_data[1] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * uvec3(1, 0, 0));
	vox_data[2] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * uvec3(1, 1, 0));
	vox_data[3] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * uvec3(0, 1, 0));

	vox_data[4] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * vec3(0, 0, 1));
	vox_data[5] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * vec3(1, 0, 1));
	vox_data[6] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * vec3(1, 1, 1));
	vox_data[7] = mag * cnoise( bounds.r * scale * position + bounds.r * scale * vec3(0, 1, 1));

	// Turn this information into a triangle list index:
	int triangleTypeIndex = 0;

	[[unroll]] for (uint i = 0; i < 8; i++) {
		if (vox_data[i] > ubo.settings.threshold) {
			triangleTypeIndex |= 1 << i;
		}
	}

	// Set up all neighboring vertices:
	vec3 verts[12];
	[[unroll]] for (uint i = 0; i < 12; i++) { verts[i] = vec3(0, 0, 0); }

	createVerts(gl_LocalInvocationID, verts, vox_data);

	const int tri_vert_indices[num_point_4_cell] = tConnectionTable[triangleTypeIndex];
	vec3 curNormal = vec3(0, 0, 1);

	const vec3 geometry_offset = ubo.settings.position_offset.xyz * bounds.r * ubo.settings.voxel_size;

	//
	[[unroll]] for (uint i = 0; i < num_point_4_cell; i++) {

		/*	*/
		if (i % 3 == 0) {
			const vec3 p1 = verts[tri_vert_indices[i]];
			const vec3 p2 = verts[tri_vert_indices[i + 1]];
			const vec3 p3 = verts[tri_vert_indices[i + 2]];
			curNormal = normalize(cross((p1 - p2), (p1 - p3)));
		}

		/*	*/
		const uint targetVertIndex = gl_LocalInvocationIndex * num_point_4_cell + i;

		/*	*/
		if (tri_vert_indices[i] > -1) {

			vertices[targetVertIndex].pos = verts[tri_vert_indices[i]] + geometry_offset;
			vertices[targetVertIndex].normal = curNormal;
			vertices[targetVertIndex].scale = ubo.settings.voxel_size;
			vertices[targetVertIndex].size = 0;
		} else {

			vertices[targetVertIndex].pos = vec3(0, 0, 0);
			vertices[targetVertIndex].normal = vec3(0, 1, 0);

			vertices[targetVertIndex].scale = 0;
			vertices[targetVertIndex].size = 0;
		}
	}
}