#version 460 core
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D SourceTexture;
layout(set = 0, binding = 1, rgba16f) uniform restrict writeonly image2D TargetTexture;

layout(push_constant) uniform Settings {
	layout(offset = 0) int upscale;
	layout(offset = 4) int filterRadius;
	layout(offset = 8) uvec2 finalSize;
}
settings;

#include "common.glsl"

void main() {

	/*	*/
	const ivec2 sourceSize = textureSize(SourceTexture, 0);
	const ivec2 targetSize = imageSize(TargetTexture);

	/*	*/
	const uvec2 workItems = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;
	const vec2 ratioSize = (vec2(sourceSize) / vec2(workItems));

	/*	*/
	const vec2 sourceDownSampleSize = (sourceSize / ratioSize.x) * 0.5;
	const ivec2 targetDownSampleSize = ivec2(sourceDownSampleSize) * 2;

	/*	*/
	if (any(greaterThan(gl_GlobalInvocationID.xy, targetDownSampleSize))) {
		return;
	}

	/*	*/
	const uvec2 upsampleCoordinate = gl_GlobalInvocationID.xy;

	/*	*/
	const vec2 source_texel_size = 1.0 / textureSize(SourceTexture, 0);
	const vec2 maxUVSize = source_texel_size * sourceDownSampleSize;

	/*	*/
	const float x = source_texel_size.x * settings.filterRadius;
	const float y = source_texel_size.y * settings.filterRadius;
	const vec2 texCoord = (upsampleCoordinate + 0.5) * source_texel_size * 0.5;

	{
		const vec3 a = texture(SourceTexture, min(vec2(texCoord.x - 2 * x, texCoord.y + 2 * y), maxUVSize)).rgb;
		const vec3 b = texture(SourceTexture, min(vec2(texCoord.x, texCoord.y + 2 * y), maxUVSize)).rgb;
		const vec3 c = texture(SourceTexture, min(vec2(texCoord.x + 2 * x, texCoord.y + 2 * y), maxUVSize)).rgb;

		const vec3 d = texture(SourceTexture, min(vec2(texCoord.x - 2 * x, texCoord.y), maxUVSize)).rgb;
		const vec3 e = texture(SourceTexture, min(vec2(texCoord.x, texCoord.y), maxUVSize)).rgb;
		const vec3 f = texture(SourceTexture, min(vec2(texCoord.x + 2 * x, texCoord.y), maxUVSize)).rgb;

		const vec3 g = texture(SourceTexture, min(vec2(texCoord.x - 2 * x, texCoord.y - 2 * y), maxUVSize)).rgb;
		const vec3 h = texture(SourceTexture, min(vec2(texCoord.x, texCoord.y - 2 * y), maxUVSize)).rgb;
		const vec3 i = texture(SourceTexture, min(vec2(texCoord.x + 2 * x, texCoord.y - 2 * y), maxUVSize)).rgb;

		const vec3 j = texture(SourceTexture, min(vec2(texCoord.x - x, texCoord.y + y), maxUVSize)).rgb;
		const vec3 k = texture(SourceTexture, min(vec2(texCoord.x + x, texCoord.y + y), maxUVSize)).rgb;
		const vec3 l = texture(SourceTexture, min(vec2(texCoord.x - x, texCoord.y - y), maxUVSize)).rgb;
		const vec3 m = texture(SourceTexture, min(vec2(texCoord.x + x, texCoord.y - y), maxUVSize)).rgb;

		vec3 upsample = e * 4.0;
		upsample += (b + d + f + h) * 2.0;
		upsample += (a + c + g + i);

		upsample *= 1.0 / 16.0;

		imageStore(TargetTexture, ivec2(upsampleCoordinate), vec4(upsample, 1));
	}
}