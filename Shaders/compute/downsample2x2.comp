#version 460 core
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D SourceTexture;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D TargetTexture;

layout(push_constant) uniform Settings { layout(offset = 0) int filterRadius; }
settings;

#include "common.glsl"

void main() {

	/*	*/
	const vec2 sourceSize = textureSize(SourceTexture, 0);
	const ivec2 targetSize = imageSize(TargetTexture);

	/*	*/
	const uvec2 workItems = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;
	const vec2 ratioSize = ceil(vec2(workItems) / vec2(sourceSize));

	/*	*/
	const ivec2 targetDownSampleSize = targetSize * int(ratioSize.x);
	const ivec2 sourceDownSampleSize = targetDownSampleSize * 2;

	/*  */
	if (any(greaterThanEqual(gl_GlobalInvocationID.xy, targetDownSampleSize))) {
		return;
	}

	/*	*/
	const vec2 source_texel_size = (1.0 / sourceSize);
	const vec2 maxUVSize = source_texel_size * sourceDownSampleSize;

	/*	*/
	const uvec2 downSampleCoordinate = gl_GlobalInvocationID.xy;
	const vec2 SourceImageCoordinate = source_texel_size * ratioSize * (downSampleCoordinate + 0.5) * 2;

	/*	Filter offset.	*/
	const float x = settings.filterRadius * source_texel_size.x;
	const float y = settings.filterRadius * source_texel_size.y;

	{
		/*	*/
		const vec3 a = texture(SourceTexture,
							   min(vec2(SourceImageCoordinate.x - 2 * x, SourceImageCoordinate.y + 2 * y), maxUVSize))
						   .rgb;
		const vec3 b =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x, SourceImageCoordinate.y + 2 * y), maxUVSize)).rgb;
		const vec3 c = texture(SourceTexture,
							   min(vec2(SourceImageCoordinate.x + 2 * x, SourceImageCoordinate.y + 2 * y), maxUVSize))
						   .rgb;

		const vec3 d =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x - 2 * x, SourceImageCoordinate.y), maxUVSize)).rgb;
		const vec3 e =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x, SourceImageCoordinate.y), maxUVSize)).rgb;
		const vec3 f =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x + 2 * x, SourceImageCoordinate.y), maxUVSize)).rgb;

		const vec3 g = texture(SourceTexture,
							   min(vec2(SourceImageCoordinate.x - 2 * x, SourceImageCoordinate.y - 2 * y), maxUVSize))
						   .rgb;
		const vec3 h =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x, SourceImageCoordinate.y - 2 * y), maxUVSize)).rgb;
		const vec3 i = texture(SourceTexture,
							   min(vec2(SourceImageCoordinate.x + 2 * x, SourceImageCoordinate.y - 2 * y), maxUVSize))
						   .rgb;

		const vec3 j =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x - x, SourceImageCoordinate.y + y), maxUVSize)).rgb;
		const vec3 k =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x + x, SourceImageCoordinate.y + y), maxUVSize)).rgb;
		const vec3 l =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x - x, SourceImageCoordinate.y - y), maxUVSize)).rgb;
		const vec3 m =
			texture(SourceTexture, min(vec2(SourceImageCoordinate.x + x, SourceImageCoordinate.y - y), maxUVSize)).rgb;

		/*	*/
		vec3 downsample = e * 0.125;
		downsample += (a + c + g + i) * 0.03125;
		downsample += (b + d + f + h) * 0.0625;
		downsample += (j + k + l + m) * 0.125;

		/*	*/
		imageStore(TargetTexture, ivec2(downSampleCoordinate), vec4(downsample, 1));
	}
}