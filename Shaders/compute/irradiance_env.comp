#version 460 core
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform sampler2D sourceEnvTexture;
layout(set = 0, binding = 1, rgba32f) uniform restrict writeonly image2D targetIrradianceTexture;

#include "common.glsl"

void main() {

	/*  */
	if (any(greaterThan(gl_GlobalInvocationID.xy, imageSize(targetIrradianceTexture)))) {
		return;
	}

	/*	Get pixel coordinate.	*/
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	const vec2 normalized_uv_coords = vec2(pixel_coords) / vec2(imageSize(targetIrradianceTexture));

	// TODO: improve mapping.
	const vec3 direction = -equirectangular(2 * normalized_uv_coords - 1);

	vec3 irradiance = vec3(0.0);

	vec3 up = vec3(0.0, 1.0, 0.0);
	vec3 right = normalize(cross(up, direction));
	up = normalize(cross(direction, right));

	const float sampleDelta = 0.025;

	float nrSamples = 0.0;
	for (float phi = 0.0; phi < 2.0 * PI; phi += sampleDelta) {
		for (float theta = 0.0; theta < 0.5 * PI; theta += sampleDelta) {
			// spherical to cartesian (in tangent space)
			vec3 tangentSample = vec3(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));
			// tangent space to world
			vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * direction;

			const vec2 panoramic_coordinate = inverse_equirectangular(sampleVec);

			irradiance += textureLod(sourceEnvTexture, panoramic_coordinate, 3).rgb * cos(theta) * sin(theta);
			// irradiance = min(irradiance, 162553);
			nrSamples++;
		}
	}
	irradiance = PI * irradiance * (1.0 / float(nrSamples));

	imageStore(targetIrradianceTexture, pixel_coords, vec4(irradiance, 1));
}