#version 460 core
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(set = 0, binding = 0, r16f) uniform writeonly image2D TargetTexture;

layout(push_constant) uniform Settings {
	layout(offset = 0) vec2 offset;
	layout(offset = 8) vec2 size;
	layout(offset = 16) vec2 ampfreq;
}
settings;

#include "common.glsl"
#include "noise.glsl"

// TODO: move to common
float calculateHeightDisplacement(const vec3 position, const vec2 tile_noise, const int octave) {
	const float lacunarity = 2.0f;
	const float persistence = 0.5f;

	float frequency = 1;
	float amplitude = 1000;

	float heightMapDisp = 0;
	float denom = 0.f;

	for (uint i = 0; i < octave; i++) {

		heightMapDisp += noise(position * tile_noise.xyx * frequency) * amplitude;
		denom += amplitude;

		frequency *= lacunarity;
		amplitude *= persistence;
	}

	return heightMapDisp / denom;
}

void main() {

	/*  */
	const vec2 textureSize = imageSize(TargetTexture);
	if (any(greaterThan(gl_GlobalInvocationID.xy, textureSize))) {
		return;
	}

	/*	Get pixel coordinate.	*/
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	const vec2 normalized_uv_coords = vec2(pixel_coords + settings.offset.xy) / textureSize;

	const float noise_height = calculateHeightDisplacement(normalized_uv_coords.xyx, settings.size.xy, 16);

	imageStore(TargetTexture, pixel_coords, vec4(noise_height));
}