#version 460
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 32, local_size_y = 1) in;

/*	Include common.	*/
#include"ocean_base.glsl"


layout(std430, set = 0, binding = 1) buffer Positions { particle_t pos[]; }
positions;

void main() {
	uvec3 index = gl_GlobalInvocationID.xyz;

	uint width = uint(ubo.width);
	uint height = uint(ubo.height);
	float patchSize = ubo.patchSize;

	uint x = index.z;
	uint y = index.y;
	uint i = y * width + x;
	positions.pos[index.x].ht_real_img.x += 0.000001;

	// // calculate coordinates
	// vec2 k;
	// k.x = (PI * x) / patchSize;
	// k.y = (2.0 * PI * y) / patchSize;
	// // calculate dispersion w(k)
	// float k_len = length(k);
	// float w = sqrt(9.81f * k_len);
	// vec2 h0_k = positions.pos[i].h0;
	// vec2 h0_mk = positions[(((height - 1) - y) * width) + x].h0;
	// vec2 h_tilda = complex_mult(h0_k, complex_exp(w * t)) + complex_mult(conjugate(h0_mk), complex_exp(-w * t));
	// // output frequency-space complex values
	// if ((x < width) && (y < height)) {
	// 	positions[i].ht_real_img = vec2(h_tilda.x, h_tilda.y);
	// }
}