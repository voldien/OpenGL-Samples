#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable

#define CHUNK_DIM_SIZE 32
layout(local_size_x = CHUNK_DIM_SIZE, local_size_y = CHUNK_DIM_SIZE, local_size_z = 1) in;

layout(set = 0, binding = 0, std140) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;

	vec4 worldOffset;

	vec4 frustumplanes[6];

	/*	Settings.	*/
	float globalScale;
	int geometryBaseFaceCount;
}
ubo;

#include "common.glsl"

struct DrawElementsIndirectCommand {
	uint count;
	uint instanceCount;
	uint firstIndex;
	uint baseVertex;
	uint baseInstance;
};

/* Indirect drawing count	*/
layout(set = 0, binding = 0) buffer IndirectWrite { DrawElementsIndirectCommand instance[]; }
instances;

struct _instance_data_t {
	mat4 model;
	vec4 color;
};

layout(std430, binding = 1) writeonly buffer InstanceModel { _instance_data_t instance[]; }
writeBuffer;

bool inBounds(const in float value, const in float bounds) { return (value >= -bounds) && (value <= bounds); }

void main() {

	const uint indirect_index = gl_GlobalInvocationID.y;

	if (gl_GlobalInvocationID.x == 0) {
		instances.instance[indirect_index].count = 0;
	}
	barrier(); // Wait till all threads reach this point

	/*	*/
	[[unroll]] for (uint h = 0; h < CHUNK_DIM_SIZE; h++) {

		const uvec3 height_offset = uvec3(0, 0, h);

		const uvec3 worldIndex = uvec3(gl_GlobalInvocationID.xyz) + height_offset;
		const vec3 worldPosition = gl_GlobalInvocationID.xyz + height_offset;

		// const uint instance_index =
		//	gl_GlobalInvocationID.z *
		//		(gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_WorkGroupSize.y) +
		//	gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;

		const float density = cnoise(gl_GlobalInvocationID.xyz);

		/* Frustum culling	*/
		vec4 v0ClipSpace = ubo.proj * ubo.view * vec4(worldPosition, 1);
		vec4 v1ClipSpace = ubo.proj * ubo.view * vec4(worldPosition, 1);
		v0ClipSpace /= v0ClipSpace.w;
		v1ClipSpace /= v1ClipSpace.w;

		const bool v0OutFrustum = v0ClipSpace.x < -1 || v0ClipSpace.x > 1 || v0ClipSpace.y < -1 || v0ClipSpace.y > 1;

		const bool v1OutFrustum = v1ClipSpace.x < -1 || v1ClipSpace.x > 1 || v1ClipSpace.y < -1 || v1ClipSpace.y > 1;
		if (v0OutFrustum && v1OutFrustum) {
			continue;
		}

		// Distance culling
		/*
		const float far1 = 0.95;
		if (v0ClipSpace.z > far1 && v1ClipSpace.z > far1 && rand(index) > 0.5) {
			return;
		}
		const float far2 = 0.98;
		if (v0ClipSpace.z > far2 && v1ClipSpace.z > far2 && rand(index) > 0.2) {
			return;
		}
		const float far3 = 0.99;
		if (v0ClipSpace.z > far3 && v1ClipSpace.z > far3 && rand(index) > 0.1) {
			return;
		}
		*/

		/*	construct translate scale matrix.	*/
		mat4 transform = mat4(1);
		transform[3][0] = worldPosition.x;
		transform[3][1] = worldPosition.y;
		transform[3][2] = worldPosition.z;
		const float scale = ubo.globalScale;
		transform[0][0] = step(density, 0.5) * density;
		transform[1][1] = step(density, 0.5) * density;
		transform[2][2] = step(density, 0.5) * density;

		const uint instance_index = atomicAdd(instances.instance[indirect_index].instanceCount, 1);

		/*	*/
		/*	Note: Look up table instead perhaps.	*/
		writeBuffer.instance[instance_index].model = transform;
		writeBuffer.instance[instance_index].color = vec4(vec3(gl_GlobalInvocationID.xyz) * 0.05 * density, 1);
	}

	/*	*/
	if (gl_GlobalInvocationID.x == 0) {
		instances.instance[indirect_index].firstIndex = 0;
		instances.instance[indirect_index].baseVertex = 0;
		instances.instance[indirect_index].baseInstance = 0;
		instances.instance[indirect_index].count = ubo.geometryBaseFaceCount;
	}
}