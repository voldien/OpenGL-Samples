#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(binding = 0, r8ui) uniform readonly uimage2D previousCellsTexture;

layout(binding = 1, r8ui) uniform writeonly uimage2D currentCellsTexture;

layout(binding = 2, rgba8) uniform writeonly image2D renderTexture;

const int GOFLUT[10] = {0, 0, 1, 1, 0, 0, 0, 0, 0, 0};

const int mat[10] = {1, 1, 1, 1, 0, 1, 1, 1, 1, 0};
const vec3 color[10] = {vec3(0, 0, 0), vec3(0, 0, 1), vec3(1, 0, 0), vec3(0, 1, 0), vec3(1, 0, 0),
						vec3(0, 0, 0), vec3(1, 0, 0), vec3(1, 1, 0), vec3(0, 0, 0), vec3(0, 0, 0)};

void main() {

	/*	*/
	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	
	/*	*/
	uint cell = imageLoad(previousCellsTexture, pixel_coords).r;

	uint sum = 0;

	/* Check Each cell.	*/
	for (int y = -1; y <= 1; y++) {
		for (int x = -1; x <= 1; x++) {

			const uint index = (x + 1) + (y + 1) * 3;
			ivec2 offsetCordinate = (pixel_coords + ivec2(x, y)) % imageSize(previousCellsTexture);

			/*	*/
			sum += min(imageLoad(previousCellsTexture, offsetCordinate).r, 1) * mat[index];
		}
	}

	/*	*/
	uint result = 0;
	if (cell == 1) {
		result = GOFLUT[sum];
	}
	else if (cell == 0 && sum == 3) {
		result = 1;
	}else{
		sum = 0;
	}

	/*	*/
	imageStore(currentCellsTexture, pixel_coords, uvec4(result));

	/*	*/
	imageStore(renderTexture, pixel_coords, vec4(color[sum], 1));
}
