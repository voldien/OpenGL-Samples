#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 1, rgba8) uniform readonly image2D texture0;

layout(binding = 0, rgba8) uniform writeonly image2D texture1;

layout(binding = 1, std140) uniform UniformBufferBlock {
	vec2 pos;
	vec2 mousePos;
	float zoom; /*  */
	float c;	/*  */
	int nrSamples;
}
u_pushConstants;

void main() {

	if (any(greaterThan(gl_GlobalInvocationID.xy, imageSize(texture0)))) {
		return;
	}
	// Get output fragcolor texture coordinate.

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	const float GOFLUT[9] = {0, 0, 1, 1, 0, 0, 0, 0, 0};
	const int mat[9] = {1, 1, 1, 1, 0, 1, 1, 1, 1};

	int sum = 0;
	for (int x = -1; x < 1; x++) {
		for (int y = -1; y < 1; y++) {
			const int index = (x + 1) * 3 + (y + 1);
			sum += int(imageLoad(texture0, pixel_coords + ivec2(x, y)).r) * mat[index];
		}
	}

	float result = GOFLUT[sum];

	imageStore(texture1, pixel_coords, vec4(result, result, result, 1));
}