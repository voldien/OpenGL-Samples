#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable

layout(local_size_x = 64, local_size_y = 64, local_size_z = 1) in;

layout(binding = 1, rgba8) uniform readonly image2D texture0;

layout(binding = 0, rgba8) uniform writeonly image2D fragColor;


layout(binding = 1, std140) uniform UniformBufferBlock {
	vec2 pos;
	vec2 mousePos;
	float zoom; /*  */
	float c;	/*  */
	int nrSamples;
}
u_pushConstants;

void main() {

	if (any(greaterThan(gl_GlobalInvocationID.xy, imageSize(texture0)))) {
		return;
	}
	// Get output fragcolor texture coordinate.

	ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	ivec2 fragSize = imageSize(fragColor);
	ivec2 TexSize = imageSize(texture0);

	// Compute sample coordinate.
	vec2 TexDiff = vec2(TexSize) / vec2(fragSize);
	ivec2 sampleTexCoord = ivec2(TexDiff * pixel_coords);

	// TODO add recompute of the sample kernel coordinates.
	const ivec2 lb = ivec2(-1.0 * TexDiff.x, -1.0 * TexDiff.y);
	vec4 p00 = imageLoad(texture0, sampleTexCoord + lb);
	const ivec2 b = ivec2(0.0 * TexDiff.x, -1.0 * TexDiff.y);
	vec4 p10 = imageLoad(texture0, sampleTexCoord + b);
	const ivec2 rb = ivec2(1.0 * TexDiff.x, -1.0 * TexDiff.y);
	vec4 p20 = imageLoad(texture0, sampleTexCoord + rb);

	const ivec2 l = ivec2(-1.0 * TexDiff.x, 0.0 * TexDiff.y);
	vec4 p01 = imageLoad(texture0, sampleTexCoord + l);
	const ivec2 r = ivec2(1.0 * TexDiff.x, 0.0 * TexDiff.y);
	vec4 p21 = imageLoad(texture0, sampleTexCoord + r);

	const ivec2 lt = ivec2(-1.0 * TexDiff.x, 1.0 * TexDiff.y);
	vec4 p02 = imageLoad(texture0, sampleTexCoord + lt);
	const ivec2 t = ivec2(-1.0 * TexDiff.x, 1.0 * TexDiff.y);
	vec4 p12 = imageLoad(texture0, sampleTexCoord + t);
	const ivec2 rt = ivec2(1.0 * TexDiff.x, 1.0 * TexDiff.y);
	vec4 p22 = imageLoad(texture0, sampleTexCoord + rt);


	imageStore(fragColor, pixel_coords, vec4(1, 1, 1, 1));
}