#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

struct _instance_data_t {
	mat4 model;
	vec4 color;
};

layout(binding = 0) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;

	/*	Light source.	*/
	vec4 direction;
	vec4 lightColor;
	vec4 ambientColor;

	/*	*/
	uint nrFaces;
	float delta;
	float scale;
}
ubo;

/* Indirect drawing count	*/
layout(std430, binding = 1) buffer volatile IndirectWrite {
	uint count;
	uint instanceCount;
	uint firstIndex;
	int baseVertex;
	uint baseInstance;
}
instances;

layout(std430, binding = 2) writeonly buffer InstanceModel { _instance_data_t instance[]; }
writeBuffer;

void main() {

	uint pindex = gl_GlobalInvocationID.x;
	if (gl_GlobalInvocationID.x == 0) {
		instances.instanceCount = 0;
	}
	barrier(); // Wait till all threads reach this point

	uint globalIndex = 0;
	uint localIndex = 0;

	mat4 transform = mat4(1);
	transform[3][0] = gl_GlobalInvocationID.x;
	transform[3][1] = gl_GlobalInvocationID.y;
	transform[3][2] = gl_GlobalInvocationID.z;

	const float scale = 0.3;
	transform[0][0] = scale;
	transform[1][1] = scale;
	transform[2][2] = scale;

	// TODO:
	//atomicAdd(instances.instanceCount, 1);

	//const uint instance_index =
	//	gl_GlobalInvocationID.z * (gl_NumWorkGroups.x * gl_NumWorkGroups.y * gl_WorkGroupSize.x * gl_WorkGroupSize.y) +
	//	gl_GlobalInvocationID.y * (gl_NumWorkGroups.x * gl_WorkGroupSize.x) + gl_GlobalInvocationID.x;

	const uint instance_index = atomicAdd(instances.instanceCount, 1);
	barrier(); // Wait till all threads reach this point

	writeBuffer.instance[instance_index].model = transform;
	writeBuffer.instance[instance_index].color = vec4(vec3(gl_GlobalInvocationID.xyz) * 0.05, 1);

	barrier(); // Wait till all threads reach this point

	/*	*/
	if (gl_GlobalInvocationID.x == 0) {
		instances.count = ubo.nrFaces;
		instances.firstIndex = 0;
		instances.baseVertex = 0;
		instances.baseInstance = 0;
	}
}
