#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

// Input data

struct Plane {
	vec3 normal; /*	*/
	float d;	 /*	*/
};
struct AABB {
	vec3 min, max;
};
struct culling {
	uint insideCount;
};

const int nrPlanees = 6;
layout(set = 0, binding = 0, std140) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;
	Plane planes[nrPlanees];
	uint aabb_count;
}
ubo;

layout(set = 0, binding = 1) restrict buffer AABBInstanceBlock { AABB aabb[]; }
aabb;

/*  output data.    */
layout(set = 0, binding = 2) restrict buffer CulledResult { culling result[]; }
culled;

uint intersectionAABB(const in Plane plane, const in AABB aabb) {
	/*	*/
	const vec3 center = (aabb.max - aabb.min) * 0.5;
	const vec3 extents = (aabb.max - center);

	/*	*/
	const float r = extents.x * abs(plane.normal.x) + extents.y * abs(plane.normal.y) + extents.z * abs(plane.normal.z);

	return -r >= dot(plane.normal, center) - plane.d ? 1 : 0;
}

void main() {

	/*	*/
	const uint aabb_index = gl_GlobalInvocationID.x;
	if (aabb_index >= ubo.aabb_count) {
		return;
	}

	const AABB instance = aabb.aabb[aabb_index];

	uint count = 0;
	[[unroll]] for (int i = 0; i < nrPlanees; i++) {
		
		/*	*/
		count += intersectionAABB(ubo.planes[i], instance);
	}

	culled.result[aabb_index].insideCount = count;
}