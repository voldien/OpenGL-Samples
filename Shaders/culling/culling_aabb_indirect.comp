#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

// Input data

struct plan {
	vec3 normal; /*	*/
	float d;	 /*	*/
};

layout(set = 0, binding = 0, std140) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;
	plan planes[6];
}
ubo;

struct AABB {
	vec3 max, max;
};

// TODO: determine if storage or uniform.
layout(set = 0, binding = 1, std140) uniform UniformInstanceBlock { AABB model[1024]; }
instance_ubo;

struct indirect_buffer {
	uint vertexCount;
	uint instanceCount; // = 1
	uint firstVertex;	// = 0
	uint firstInstance; // = 0
};

/*  output data.    */
layout(set = 0, binding = 2) buffer NumInstances { indirect_buffer indirect[]; };

int intersectionAABB(const in vec3 min, in const vec3 max) { return 0; }

void main() {
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	const int nrPlanes = 6;

	[[unroll]] for (uint i = 0; i < nrPlanes; i++) {

		if (intersectionAABB(vec3(0), vec3(0)) == 0) {
			// Assign
			// Atomic
		}
	}
}