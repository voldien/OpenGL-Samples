#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 4, local_size_y = 4, local_size_z = 1) in;

// Input data

struct plan {
	vec3 normal; /*	*/
	float d;	 /*	*/
};
struct Sphere {
	vec3 center;
	float radius;
};
struct culling {
	uint insideCount;
};

const int nrPlanees = 6;
layout(set = 0, binding = 0, std140) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;
	plan planes[6];
	uint aabb_count;
}
ubo;


// TODO: determine if storage or uniform.
layout(set = 0, binding = 1, std140) uniform SphereInstanceBlock { Sphere sphere[1024]; }
instance_sphere;

/*  output data.    */
layout(set = 0, binding = 2) buffer CulledResult { culling result[]; }
culled;

int intersectionSphere(const in vec3 center, in const float radius) { return 0; }

void main() {
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	const uint aabb_index = gl_GlobalInvocationID.x;
	if (aabb_index >= ubo.aabb_count) {
		return;
	}

		int count = 0;
	[[unroll]] for (uint i = 0; i < nrPlanees; i++) {
		const vec3 sphere_center = instance_sphere.sphere[aabb_index].center;
		const float radius = instance_sphere.sphere[aabb_index].radius;

		if (intersectionSphere(sphere_center, radius) == 0) {
			// Assign
			count++;
		}
	}
}