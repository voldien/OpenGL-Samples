#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Contains the cells information.
layout(set = 0, binding = 0, std430) writeonly buffer img_current_cells { vec2 AB[]; }
CurrentAB;

layout(set = 0, binding = 1, std430) readonly buffer img_previous_cells { vec2 AB[]; }
PreviousAB;

layout(rgba32f, set = 0, binding = 2) uniform image2D img_output;

layout(set = 0, binding = 3) uniform UniformBufferBlock {
	mat4 kernelA;
	mat4 kernelB;
	/*	*/
	float feedRate;
	float killRate;
	float diffuseRateA;
	float diffuseRateB;
	float delta;
	float speed;
	float padding0;
	float padding1;
}
ubo;

float computeDiffuseRateA(const float A, const float B, const float diverage, const float killRate,
						  const float feedRate, const float diffuseRate, const float delta) {
	return A + (diffuseRate * diverage - A * pow(B, 2) + feedRate * (1 - A)) * delta;
}

float computeDiffuseRateB(const float A, const float B, const float diverage, const float killRate,
						  const float feedRate, const float diffuseRate, const float delta) {
	return B + (diffuseRate * diverage + A * pow(B, 2) - (killRate - feedRate) * B) * delta;
}

ivec2 simple_mod(const ivec2 value, const ivec2 modv) { return (value % modv + modv) % modv; }

int memoryAddress(const ivec2 invokedPixelCoord, const ivec2 imageSize, const ivec2 offset) {
	const ivec2 pixelCoord = simple_mod((invokedPixelCoord + offset), imageSize);

	return max(0, pixelCoord.y * imageSize.y + pixelCoord.x);
}

float lapacianA(const ivec2 pixelCord, const ivec2 imageSize, const mat4 convolutionKernel) {
	float result = 0;
	/*	*/
	[[unroll]] for (int y = 0; y < 3; y++) {
		[[unroll]] for (int x = 0; x < 3; x++) {
			result += convolutionKernel[x][2 - y] *
					  PreviousAB.AB[memoryAddress(pixelCord, imageSize, ivec2(-1 + x, -1 + y))].x;
		}
	}
	return result;
}

float lapacianB(const ivec2 pixelCord, const ivec2 imageSize, const mat4 convolutionKernel) {
	float result = 0;
	/*	*/
	[[unroll]] for (int y = 0; y < 3; y++) {
		[[unroll]] for (int x = 0; x < 3; x++) {
			result += convolutionKernel[x][2 - y] *
					  PreviousAB.AB[memoryAddress(pixelCord, imageSize, ivec2(-1 + x, -1 + y))].y;
		}
	}
	return result;
}

void main() {

	/*	*/
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 cellCellImageSize = imageSize(img_output);

	if(pixel_coords.x > cellCellImageSize.x || pixel_coords.y > cellCellImageSize.y){
		return;
	}

	const uint memory_index = memoryAddress(pixel_coords, cellCellImageSize, ivec2(0, 0));

	/*	*/
	const vec2 AB = PreviousAB.AB[memory_index];

	/*	*/
	const float diverageA = lapacianA(pixel_coords, cellCellImageSize, ubo.kernelA);
	const float diverageB = lapacianB(pixel_coords, cellCellImageSize, ubo.kernelB);

	/*	*/
	const float pA =
		computeDiffuseRateA(AB.x, AB.y, diverageA, ubo.killRate, ubo.feedRate, ubo.diffuseRateA, ubo.delta * ubo.speed);
	const float pB =
		computeDiffuseRateB(AB.x, AB.y, diverageB, ubo.killRate, ubo.feedRate, ubo.diffuseRateB, ubo.delta * ubo.speed);

	/*	*/
	const vec2 newAB = vec2(pA, pB);
	CurrentAB.AB[memory_index] = newAB;

	const float ABmag = length(newAB);

	/*	Display the color.	*/
	const vec4 pixel = vec4(pA / ABmag, abs(diverageA - diverageB) / ABmag, pB / ABmag, 1);

	// TODO forward the diverage to a buffer to be drawn
	imageStore(img_output, pixel_coords, pixel);
}