#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable

layout(local_size_x = 32, local_size_y = 32) in;

layout(set = 0, binding = 0, std140) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;
}
ubo;

layout(set = 0, binding = 2, std430) readonly buffer RaySampler { vec2 AB[]; }
raySampler;
#define MAX_RECURSION 10

layout(binding = 0, rgba8) uniform writeonly image2D renderTexture;
layout(binding = 1, rgba16f) uniform readonly image2D backgroundTexture;


vec2 inverse_equirectangular(vec3 direction) {
	const vec2 invAtan = vec2(0.1591, 0.3183);
	vec2 uv = vec2(atan(direction.z, direction.x), asin(direction.y));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}

void main() {
    
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 ImageSize = imageSize(renderTexture);

	const vec2 pixel_coords_normalized = vec2(gl_GlobalInvocationID.xy) / ImageSize;
	vec3 v_position = vec3(0);

	float cameraFOV = 0.8;
	vec3 direction = vec3(pixel_coords_normalized.x * cameraFOV * ImageSize.x / ImageSize.y,
						  pixel_coords_normalized.y * cameraFOV, 1.0);

	Ray ray;
	ray.O = vec3(ubo.view * vec4(1, 1, 1, 1.0));
	ray.D = normalize(vec3(ubo.view * vec4(direction, 0.0)));

	const ivec2 lut = ivec2(inverse_equirectangular(ray.D) * imageSize(backgroundTexture));
	const vec4 backgroundColor = imageLoad(backgroundTexture, lut);

	/*	Update the render texture in order to display as a texture.	*/
	imageStore(renderTexture, pixel_coords, backgroundColor);
}