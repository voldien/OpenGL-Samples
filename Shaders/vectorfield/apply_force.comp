#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
layout(local_size_x = 4, local_size_y = 4, local_size_z = 4) in;

#include "base.glsl"

layout(binding = 0) uniform UniformBufferBlock {
	mat4 model;
	mat4 view;
	mat4 proj;
	mat4 modelView;
	mat4 modelViewProjection;

	/*	*/
	float deltaTime;

	particle_setting setting;
	motion_t motion;

	vec4 color;
}
ubo;

/*	*/
layout(std430, binding = 1) readonly buffer ReadBuffer { particle_t particle[]; }
readBuffer;
/*	*/
layout(std430, binding = 2) writeonly buffer WriteBuffer { particle_t particle[]; }
writeBuffer;

/**
 * Compute motion influence from motion pointer.
 */
vec2 computeMotionInfluence(vec4 particle) {
	/*	*/
	float dist = distance(particle.xy, ubo.motion.pos);
	float infl = 1.0; // select(dist, ubo.motion.radius, isgreater(ubo.motion.radius, dist));

	return (1.0 / infl) * ubo.motion.velocity;
}

void main() {
	/*	Iterator.	*/
	const uvec3 index = gl_GlobalInvocationID.xyz;

	const uint pindex = index.x * index.y + index.z;

	/*  Get particle.   */
	vec3 position = readBuffer.particle[pindex].position;
	vec3 velocity = readBuffer.particle[pindex].velocity.xyz;
	const float invMass = readBuffer.particle[pindex].velocity.w;

	/*  Add force to particle position. */
	//velocity = force * invMass;
	/*	Update the position.	*/
	//position = position + velocity * ubo.deltaTime;

	/*	Final position update.	*/
	//position.xyz = clamp(position.xyz, min, max);

	writeBuffer.particle[pindex].position = position;
	writeBuffer.particle[pindex].velocity = vec4(velocity, 1);
}