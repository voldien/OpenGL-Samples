#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

#include "base.glsl"

/*	*/
layout(std430, binding = 1) readonly restrict buffer ReadBuffer { particle_t particle[]; }
readBuffer;
/*	*/
layout(std430, binding = 2) writeonly restrict buffer WriteBuffer { particle_t particle[]; }
writeBuffer;

void main() {

	[[unroll]] for (int i = 0; i < NR_Particles; i++) {

		/*	Particle index.	*/
		const uint pindex = gl_GlobalInvocationID.x * NR_Particles + i;

		if (pindex >= ubo.setting.nrParticles) {
			return;
		}

		writeBuffer.particle[pindex].position.xy = vec2(10,10);
		writeBuffer.particle[pindex].velocity.xy = vec2(0,0);

	}
}
