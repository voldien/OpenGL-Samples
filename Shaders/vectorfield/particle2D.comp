#version 460 core
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable
#extension GL_EXT_control_flow_attributes : enable
#extension GL_ARB_shading_language_include : enable
#extension GL_GOOGLE_include_directive : enable

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

#include "base.glsl"

/*	*/
layout(std430, set = 0, binding = 1) readonly restrict buffer ReadBuffer { particle_t particle[]; }
readBuffer;
/*	*/
layout(std430, set = 0, binding = 2) writeonly restrict buffer WriteBuffer { particle_t particle[]; }
writeBuffer;

void main() {

	[[unroll]] for (int i = 0; i < NR_Particles; i++) {

		/*	Particle index.	*/
		const uint pindex = gl_GlobalInvocationID.x * NR_Particles + i;

		if (pindex >= ubo.setting.nrParticles) {
			return;
		}

		/*	Bounding Box of the simluation.	*/
		const vec2 max_bound = ubo.setting.particleBox.xy;
		const vec2 min_bound = vec2(0, 0);

		const float delta = ubo.deltaTime * ubo.setting.speed;

		/*  Get particle.   */
		vec2 position = readBuffer.particle[pindex].position.xy;
		const vec2 velocity = readBuffer.particle[pindex].velocity.xy;
		const float invMass = readBuffer.particle[pindex].velocity.w;

		// Improve equation for drag.
		const float alpha = ubo.setting.dragMag;
		const float dragVelocityChange = min(alpha * dot(velocity, velocity) * delta, 1.0);

		/*  Add force to particle position. */
		vec2 newVelocity = velocity + (-velocity * dragVelocityChange) * delta;

		/*	Check bounds.	*/
		if (position.x + EPSILON > max_bound.x) {
			newVelocity = reflect(newVelocity, vec2(-1, 0));
		}
		if (position.y + EPSILON > max_bound.y) {
			newVelocity = reflect(newVelocity, vec2(0, -1));
		}
		if (position.x - EPSILON < min_bound.x) {
			newVelocity = reflect(newVelocity, vec2(1, 0));
		}
		if (position.y - EPSILON < min_bound.y) {
			newVelocity = reflect(newVelocity, vec2(0, 1));
		}

		/*	Update the position.	*/
		position += newVelocity * delta;

		/*	Final position update.	*/
		position.xy = clamp(position.xy, min_bound, max_bound);

		/*	Update particle.	*/
		writeBuffer.particle[pindex].position.xy = position;
		// writeBuffer.particle[pindex].time = readBuffer.particle[pindex].time - ubo.deltaTime;
		writeBuffer.particle[pindex].velocity.xy = newVelocity;
	}
}

