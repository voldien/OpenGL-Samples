#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_compute_shader : enable

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba8, binding = 0) uniform writeonly image2D img_output;

layout(constant_id = 0) const float lthreadhold = 2.0;

/*	*/
layout(set = 0, binding = 1, std140) uniform UniformBufferBlock {
	vec2 pos;
	vec2 mousePos;
	float zoom; /*  */
	float c;	/*  */
	float ci;
	int nrSamples;
}
ubo;

/*	*/
vec2 squareImaginary(in const vec2 number) {
	return vec2((number.x * number.x) - (number.y * number.y), 2 * number.x * number.y);
}

/*	*/
vec4 computeMandel(in vec2 uv) {

	const int samples = ubo.nrSamples;

	const vec2 mouseOffset = ubo.mousePos / imageSize(img_output);
	uv += mouseOffset;
	uv *= ubo.zoom;

	const vec2 c = vec2(ubo.c, ubo.ci);
	vec2 z = vec2(4.0 * uv - 2.0);

	const float max_range = lthreadhold * lthreadhold;
	
	int i = 0;
	for (; i < samples; i++) {

		z = squareImaginary(z) + c + uv;

		/*  */
		if (dot(z, z) > max_range) {
			break;
		}
	}

	if (i >= samples - 1) {
		i = 0;
	}

	const float t = float(i) / float(samples);
	const vec3 d = vec3(0.3, 0.3, 0.5);
	const vec3 e = vec3(-0.2, -0.3, -0.5);
	const vec3 f = vec3(2.1, 2.0, 3.0);
	const vec3 g = vec3(0.0, 0.1, 0.0);

	return vec4(d + e * cos(6.28318 * (f * t + g)), 1.0);
}

void main() {

	/*	*/
	if (any(greaterThan(gl_GlobalInvocationID.xy, imageSize(img_output)))) {
		return;
	}

	/*	*/
	const ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);

	/*	Normalized coordinates.	*/
	const vec2 uv = vec2(pixel_coords) / imageSize(img_output);

	const vec4 pixel = computeMandel(uv);

	/*	Apply gamma correction.	*/
	const float gamma = 2.2;
	imageStore(img_output, pixel_coords, pow(pixel, vec4(1.0 / gamma)));
}